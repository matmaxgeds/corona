knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(DT)
# remotes::install_github("wzb-ipi/dashdash")
library(dashdash)
library(readstata13)
my_vars <- openxlsx::read.xlsx("20200426_measures.xlsx") %>%
filter(!is.na(variable))
vars_used  <- my_vars %>% filter(!is.na(variable)) %>% pull(variable)
vars_used  <-c("id", "date", vars_used)
DT::datatable(my_vars, caption = "measures dataframe")
dist_df <- readstata13::read.dta13("C:/Dropbox/Sierra Leone Covid/5_data/data_in/20200430/20200430_deidentified.dta") %>%select(district) %>% mutate(i = 1:n()) %>% rename(id = district)
my_data <- readstata13::read.dta13("C:/Dropbox/Sierra Leone Covid/5_data/data_in/20200430/20200430_deidentified.dta",
convert.factors = FALSE) %>%
mutate(i = 1:n()) %>%
mutate(date = as.Date(date)) %>%
left_join(dist_df)
if(!all(vars_used %in% names(my_data))){
print(paste("Missing variables:",
paste(vars_used[!(vars_used %in% names(my_data))], collapse = ", ")))
vars_used <- vars_used[(vars_used %in% names(my_data))]
}
my_data <- my_data[, vars_used]
DT::datatable(my_data, caption = "data dataframe")
my_args <- read.csv("my_args.csv", stringsAsFactors = FALSE)
my_args <- read.csv("my_args.csv", stringsAsFactors = FALSE)
my_args <- read.csv("my_args.csv", stringsAsFactors = FALSE)
dashdash::dashdash(
output_file = "C:/Dropbox/github/sl-dashboard/docs/SL/index.html",
my_data = my_data,
my_vars = my_vars,
my_args = my_args,
map_path = "C:/Dropbox/github/sl-dashboard/docs/SL/data/shapefiles",
map_layer = "SLE_adm3",
map_region = "NAME_2")
dashdash::dashdash(
output_file = "C:/Dropbox/github/sl-dashboard/docs/SL/index.html",
my_data = my_data,
my_vars = my_vars,
my_args = my_args,
map_path = "C:/Dropbox/github/sl-dashboard/docs/SL/data/shapefiles",
map_layer = "SLE_adm3",
map_region = "NAME_2")
library(dashdash)
dashdash::dashdash(
output_file = "C:/Dropbox/github/sl-dashboard/docs/SL/index.html",
my_data = my_data,
my_vars = my_vars,
my_args = my_args,
map_path = "C:/Dropbox/github/sl-dashboard/docs/SL/data/shapefiles",
map_layer = "SLE_adm3",
map_region = "NAME_2")
dashdash::dashdash(
output_file = "C:/Dropbox/github/sl-dashboard/docs/SL/index.html",
my_data = my_data,
my_vars = my_vars,
my_args = my_args,
map_path = "C:/Dropbox/github/sl-dashboard/docs/SL/data/shapefiles")
dashdash::dashdash(
output_file = "C:/Dropbox/github/sl-dashboard/docs/SL/index.html",
my_data = my_data,
my_vars = my_vars,
my_args = my_args,
map_path = "C:/Dropbox/github/sl-dashboard/docs/SL/data/shapefiles")
detach("package:dashdash", unload = TRUE)
library(dashdash)
dashdash::dashdash(
output_file = "C:/Dropbox/github/sl-dashboard/docs/SL/index.html",
my_data = my_data,
my_vars = my_vars,
my_args = my_args,
map_path = "C:/Dropbox/github/sl-dashboard/docs/SL/data/shapefiles")
my_args <- read.csv("my_args.csv", stringsAsFactors = FALSE)
dashdash::dashdash(
output_file = "C:/Dropbox/github/sl-dashboard/docs/SL/index.html",
my_data = my_data,
my_vars = my_vars,
my_args = my_args,
map_path = "C:/Dropbox/github/sl-dashboard/docs/SL/data/shapefiles")
head(my_data)
unique(my_data$family)
my_data$family
names(my_data)
unique(my_vars$family)
for(fam in unique(my_vars$family)){
print(fam)
my_vars %>% filter(family == fam & !is.na(variable)) %>% pull(variable) %>% print}
for(fam in unique(my_vars$family)){
print(fam)
print("===")
my_vars %>% filter(family == fam & !is.na(variable)) %>% pull(variable) %>% print}
for(fam in unique(my_vars$family)){
print("===")
print(fam)
my_vars %>% filter(family == fam & !is.na(variable)) %>% pull(variable) %>% print}
my_vars <- openxlsx::read.xlsx("20200426_measures.xlsx") %>%
filter(!is.na(variable))
vars_used  <- my_vars %>% filter(!is.na(variable)) %>% pull(variable)
vars_used  <-c("id", "date", vars_used)
DT::datatable(my_vars, caption = "measures dataframe")
dist_df <- readstata13::read.dta13("C:/Dropbox/Sierra Leone Covid/5_data/data_in/20200430/20200430_deidentified.dta") %>%select(district) %>% mutate(i = 1:n()) %>% rename(id = district)
my_data <- readstata13::read.dta13("C:/Dropbox/Sierra Leone Covid/5_data/data_in/20200430/20200430_deidentified.dta",
convert.factors = FALSE) %>%
mutate(i = 1:n()) %>%
mutate(date = as.Date(date)) %>%
left_join(dist_df)
if(!all(vars_used %in% names(my_data))){
print(paste("Missing variables:",
paste(vars_used[!(vars_used %in% names(my_data))], collapse = ", ")))
vars_used <- vars_used[(vars_used %in% names(my_data))]
}
my_data <- my_data[, vars_used]
my_args <- read.csv("my_args.csv", stringsAsFactors = FALSE)
output_file = "C:/Dropbox/github/sl-dashboard/docs/SL/index.html"
map_path = "C:/Dropbox/github/sl-dashboard/docs/SL/data/shapefiles"
if(is.null(title)) title <- my_args$title
if(is.null(title)) title <- "No title provided"
if(is.null(subtitle))   subtitle <- my_args$subtitle
if(is.null(author))  author <- my_args$author
if(is.null(map_path)) map_path <- my_args$map_path
if(is.null(map_path)) map_path <- "shapefiles"
if(is.null(map_region)) map_region <- my_args$map_region
if(is.null(map_layer)) map_layer  <- my_args$map_layer
if(is.null(normalize)) normalize <- my_args$normalize
if(is.null(normalize)) normalize <- FALSE
# To do: -- check if layer is contained in my maps and turn off maps if not
if(is.null(map_layer)) stop("Map layer should be provided; e.g. `SLE_adm3`")
if(is.null(map_layer)) map_layer  <- my_args$map_layer
my_args$map_layer
map_layer
map_layer  <- my_args$map_layer
if(is.null(map_layer)) map_layer  <- my_args$map_layer
map_layer
if(is.null(map_layer)) stop("Map layer should be provided; e.g. `SLE_adm3`")
if(!exists("my_data")) stop("my_data missing")
if(!exists("my_vars")) stop("my_vars missing")
if(!exists("my_args")) stop("my_args missing")
if(is.null(title)) title <- my_args$title
if(is.null(title)) title <- "No title provided"
if(is.null(subtitle)) subtitle <- my_args$subtitle
subtitle <- my_args$subtitle
if(is.null(author)) author <- my_args$author
author <- my_args$author
if(!all(c("date", "id") %in% names(my_data))) stop("my_data should include date and id variables")
my_data <- mutate(my_data, date = as.Date(date))
families   <- my_vars %>% pull(family) %>% unique
n_families <- length(families)
k          <- 1
vars_used  <- my_vars %>% filter(!is.na(variable)) %>% pull(variable)
vars_used  <-c("start", "district", vars_used)
vars_used
shp <- readOGR(dsn = map_path,
layer=map_layer,
verbose=FALSE,
stringsAsFactors = FALSE)
shp_df <- broom::tidy(shp, region = map_region)
map_layer
map_path
map_region
map_region <- my_args$map_region
map_region
shp_df <- broom::tidy(shp, region = map_region)
k
fam <- families[k]
fam
vars <- my_vars %>% filter(family == fam & !is.na(variable)) %>% pull(variable)
var_labs <- my_vars %>% filter(family == fam & !is.na(variable)) %>% pull(short_label)
names(var_labs) <- vars
current_means <- my_data[, c("id", "date", vars)] %>%
filter(date == max(date)) %>%
group_by(id, date)  %>%
summarise_all( function(x)  mean(x, na.rm = T))
current_means %>%
kable(caption = "Mean responses in each district (most recent date)", col.names = c("District", "Date", var_labs), digits = 2)
pd <- position_dodge(0.1) # move them .05 to the left and right
my_data %>%
select(all_of(c("id", "date", vars))) %>%
reshape2::melt(id.vars= c("id", "date"))  %>%
group_by(id, date, variable) %>%
summarise_all(list(~mean(., na.rm = TRUE), ~sd(., na.rm = TRUE), ~length(.))) %>%
mutate(se = sd / sqrt(length)) %>%
ggplot(aes(x=date, y=mean)) +
geom_errorbar(aes(ymin=mean-1.96*se, ymax=mean+1.96*se), width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd) +
facet_grid(variable ~ id, scales = "free_y", labeller = labeller(variable = var_labs))
vars
my_data %>%
select(all_of(c("id", "date", vars))) %>%
reshape2::melt(id.vars= c("id", "date"))  %>%
group_by(id, date, variable) %>%
summarise_all(list(~mean(., na.rm = TRUE), ~sd(., na.rm = TRUE), ~length(.))) %>%
mutate(se = sd / sqrt(length)) %>%
ggplot(aes(x=date, y=mean)) +
geom_errorbar(aes(ymin=mean-1.96*se, ymax=mean+1.96*se), width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd) +
facet_grid(variable ~ id, scales = "free_y", labeller = labeller(variable = var_labs))
par(mar=c(0,0,0,0))
df_map <- left_join(shp_df, current_means)  %>% select(-date) %>%
reshape2::melt(id.vars= c("id", "long", "lat", "order", "hole", "piece", "group"))
ggplot() +
geom_polygon(data = df_map,
aes( x = long, y = lat,  group = group, fill=value), color="white") +
theme_void() + coord_map() + facet_wrap(~variable, labeller = labeller(variable = var_labs))
k
k = 2
knitr::opts_chunk$set(echo = FALSE)
fam <- families[k]
vars <- my_vars %>% filter(family == fam & !is.na(variable)) %>% pull(variable)
var_labs <- my_vars %>% filter(family == fam & !is.na(variable)) %>% pull(short_label)
names(var_labs) <- vars
current_means <- my_data[, c("id", "date", vars)] %>%
filter(date == max(date)) %>%
group_by(id, date)  %>%
summarise_all( function(x)  mean(x, na.rm = T))
current_means %>%
kable(caption = "Mean responses in each district (most recent date)", col.names = c("District", "Date", var_labs), digits = 2)
# New facet label names for supp variable
pd <- position_dodge(0.1) # move them .05 to the left and right
my_data %>%
select(all_of(c("id", "date", vars))) %>%
reshape2::melt(id.vars= c("id", "date"))  %>%
group_by(id, date, variable) %>%
summarise_all(list(~mean(., na.rm = TRUE), ~sd(., na.rm = TRUE), ~length(.))) %>%
mutate(se = sd / sqrt(length)) %>%
ggplot(aes(x=date, y=mean)) +
geom_errorbar(aes(ymin=mean-1.96*se, ymax=mean+1.96*se), width=.1, position=pd) +
geom_line(position=pd) +
geom_point(position=pd) +
facet_grid(variable ~ id, scales = "free_y", labeller = labeller(variable = var_labs))
par(mar=c(0,0,0,0))
df_map <- left_join(shp_df, current_means)  %>% select(-date) %>%
reshape2::melt(id.vars= c("id", "long", "lat", "order", "hole", "piece", "group"))
ggplot() +
geom_polygon(data = df_map,
aes( x = long, y = lat,  group = group, fill=value), color="white") +
theme_void() + coord_map() + facet_wrap(~variable, labeller = labeller(variable = var_labs))
my_vars %>% filter(family == fam) %>% select(short_label, description) %>% kable(caption = "Data definitions", col.names = c("Measure", "Definition"))
k <- k+1
k
k = 1
k = 5
knitr::opts_chunk$set(echo = FALSE)
fam <- families[k]
vars <- my_vars %>% filter(family == fam & !is.na(variable)) %>% pull(variable)
var_labs <- my_vars %>% filter(family == fam & !is.na(variable)) %>% pull(short_label)
names(var_labs) <- vars
current_means <- my_data[, c("id", "date", vars)] %>%
filter(date == max(date)) %>%
group_by(id, date)  %>%
summarise_all( function(x)  mean(x, na.rm = T))
vars
current_means <- my_data[, c("id", "date", vars)]
vars
names(my_data)
vars_used
head(my_vars)
my_vars <- filter(my_vars, variabls %in% vars_used)
dim(my_vars)
my_vars <- filter(my_vars, variables %in% vars_used)
my_vars <- filter(my_vars, variable %in% vars_used)
dim(my_vars)
vars_used
table(my_vars$variable)
my_vars <- openxlsx::read.xlsx("20200426_measures.xlsx") %>%
filter(!is.na(variable))
vars_used  <- my_vars %>% filter(!is.na(variable)) %>% pull(variable)
vars_used  <-c("id", "date", vars_used)
DT::datatable(my_vars, caption = "measures dataframe")
dist_df <- readstata13::read.dta13("C:/Dropbox/Sierra Leone Covid/5_data/data_in/20200430/20200430_deidentified.dta") %>%select(district) %>% mutate(i = 1:n()) %>% rename(id = district)
my_data <- readstata13::read.dta13("C:/Dropbox/Sierra Leone Covid/5_data/data_in/20200430/20200430_deidentified.dta",
convert.factors = FALSE) %>%
mutate(i = 1:n()) %>%
mutate(date = as.Date(date)) %>%
left_join(dist_df)
if(!all(vars_used %in% names(my_data))){
print(paste("Missing variables:",
paste(vars_used[!(vars_used %in% names(my_data))], collapse = ", ")))
vars_used <- vars_used[(vars_used %in% names(my_data))]
}
my_data <- my_data[, vars_used]
dim(my_vars)
my_vars$variable
table(my_vars$variable)
vars_used %in% names(my_data)
vars_used
table(vars_used)
vars_used <- vars_used[(vars_used %in% names(my_data))]
table(my_vars$variable)
tabe(vars_used)
table(vars_used)
variable %in% vars_used
vars_used  <- my_vars %>% filter(!is.na(variable)) %>% pull(variable)
vars_used  <-c("id", "date", vars_used)
DT::datatable(my_vars, caption = "measures dataframe")
dist_df <- readstata13::read.dta13("C:/Dropbox/Sierra Leone Covid/5_data/data_in/20200430/20200430_deidentified.dta") %>%select(district) %>% mutate(i = 1:n()) %>% rename(id = district)
my_data <- readstata13::read.dta13("C:/Dropbox/Sierra Leone Covid/5_data/data_in/20200430/20200430_deidentified.dta",
convert.factors = FALSE) %>%
mutate(i = 1:n()) %>%
mutate(date = as.Date(date)) %>%
left_join(dist_df)
if(!all(vars_used %in% names(my_data))){
print(paste("Missing variables:",
paste(vars_used[!(vars_used %in% names(my_data))], collapse = ", ")))
vars_used <- vars_used[(vars_used %in% names(my_data))]
}
my_data <- my_data[, vars_used]
dim(my_vars)
my_vars <- my_vars %>% filter(my_vars, variable %in% vars_used)
my_vars <- my_vars %>% filter(variable %in% vars_used)
dim(my_vars)
? scale
scale(c(1, 2, 3))
scale(c(1, 2, 3, NA, 4))
df_map <- df_map %>%
mutate_at(vars(one_of(vars)), list(~scale(.)))
if("er") a <- 3
vars
head(df_map)
current_means
head(current_means)
vars
vars <- c("less_prefer", "ask_help")
scale_vars
scale_vars <- TRUE
current_means_map <- current_means
if(scale_vars)
current_means_map <- current_means_map %>%
mutate_at(vars(one_of(vars)), list(~scale(.)))
current_means_map
scale(c(1, 0, NA, 1))
current_means_map <- current_means
current_means$less_prefer
vars
scale(current_means$less_prefer)
if(scale_vars)
current_means_map <- current_means_map %>%
mutate_at(vars(one_of(vars)), list(~scale(.)))
current_means_map
current_means_map
current_means
dim(current_means)
current_means_map <- current_means_map %>%
mutate_at(vars(one_of(vars)), list(~scale(.)))
current_means_map
current_means_map <- current_means
if(scale_vars)
current_means_map <- current_means_map %>%
mutate_at(vars(one_of(vars)), list(~scale(.)))
current_means_map
vars
vars(one_of(vars))
? vars
vars2 <- vars
vars(one_of(vars2))
current_means_map <- current_means
current_means_map <- current_means_map %>%
mutate_at(vars(one_of(vars2)), list(~scale(.)))
current_means_map
current_means_map <- current_means
current_means_map
current_means_map %>%
mutate_at(vars(one_of(vars2)), list(~scale(.)))
current_means_map %>%
mutate_at(vars(one_of(vars2)), list(~scale(.)))
current_means_map <- current_means
if(scale_vars)
current_means_map <- current_means_map %>%
mutate_at(vars(one_of(vars)),
list(~./sd(., na.rm = T)))
current_means_map
scale2 <- function(x, na.rm = FALSE) (x - mean(x, na.rm = na.rm)) / sd(x, na.rm)
current_means_map <- current_means
if(scale_vars)
current_means_map <- current_means_map %>%
mutate_at(vars(one_of(vars)), scale2)
current_means_map
current_means_map <- current_means
current_means_map$less_prefer
scale2(current_means_map$less_prefer)
vars
current_means_map <- current_means
if(scale_vars)
current_means_map <- current_means_map %>%
mutate_at(vars, list(~scale(.)))
current_means_map
current_means_map
scale2
current_means_map <- current_means
if(scale_vars)
current_means_map <- current_means_map %>%
mutate_at(vars, scale2)
current_means_map
scale2 <- function(x, na.rm = FALSE) {
x <- as.numeric(x)
(x - mean(x, na.rm = na.rm)) / sd(x, na.rm)}
par(mar=c(0,0,0,0))
current_means_map <- current_means
if(scale_vars)
current_means_map <- current_means_map %>%
mutate_at(vars, scale2)
current_means_map
current_means
1/2.8
.39/2.8
pnorm(1.96)
1-pnorm(1.96)
1-pnorm(1.6)
pnorm(1.6)
pnorm(1.2)
pnorm(1)
pnorm(.8)
pnorm(.5)
pnorm(.85)
.85+1.96
